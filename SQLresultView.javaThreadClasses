public class loadSomeStuff extends AsyncTask<String, Integer, String> {

		
		protected void onPreExecute() {
			// example of setting up something

		}

		@Override
		protected String doInBackground(String... params) {
			// TODO Auto-generated method stub
			// update preferences
			String collected = null;
			FileInputStream fis = null;

			try {
				// set up a file input stream to read from my internal file
				fis = openFileInput(FILENAME);
				// I use a byte array to tell me the amount of bytes/space
				// available in my file
				byte[] dataArray = new byte[fis.available()];
				// once the entire file is read..fis.read(dataArr) will return
				// -1
				while (fis.read(dataArray) != -1) {
					collected = new String(dataArray);
				}
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} finally {
				try {
					fis.close();
					checkResult = collected;
					//return collected;
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			/*ProjDbUI infoBackG = new ProjDbUI(SQLresultView.this);
			String checks = "";
			String dates = "";
			String neededIn = "";
			infoBackG.open();
			dates = infoBackG.getCheckDate(checkResult);
			checks = infoBackG.getData(checkResult);
			String dueDate = infoBackG.getDue(checkResult);
			String group = "";
			group = infoBackG.getGroup(checkResult);
			String goals = "";
			goals = infoBackG.getGoals(checkResult);
			neededIn = checks + "<->" + dates;
			group = infoBackG.getGroup(checkResult);
			neededIn += "<->" + group;
			goals = infoBackG.getGoals(checkResult);
			neededIn += "<->" + goals;
			neededIn += "<->" + checkResult + "<->" + dueDate;*/
			return null;
		}

		protected void onProgressUpdate(Integer... progress) {

		}

		protected void onPostExecute(String result) {
			proj.setText(checkResult);
			new DbProcThr().execute(result);
			/*String[] dbInfo = result.split("<->");
			proj.setText(dbInfo[4]);
			tvCheckDate.setText(dbInfo[1]);
			tvDue.setText(dbInfo[5]);
			LinearLayout layGs = (LinearLayout) findViewById(R.id.layGs);
			String[] dateArr = dbInfo[1].split("\n");
			String[] checkArr = dbInfo[0].split("\n");
			for(int i = 0;i < dateArr.length && i < checkArr.length;i++){
				LinearLayout zontalLay = new LinearLayout(SQLresultView.this);
				TextView dateView = new TextView(SQLresultView.this),checkView = new TextView(SQLresultView.this);
				LinearLayout.LayoutParams layPar = new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
				LinearLayout.LayoutParams dateLayPar = new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
				layPar.weight = 1.0f;
				dateLayPar.weight = 2.0f;
				dateView.setLayoutParams(dateLayPar);
				checkView.setLayoutParams(layPar);
				layCheck.addView(zontalLay);
				zontalLay.addView(dateView);
				zontalLay.addView(checkView);
				dateView.setText(dateArr[i]);
				checkView.setText(checkArr[i]);
			}
			String[] goalSplit = dbInfo[3].split("-");
			for(int i = 0;i < goalSplit.length;i++){
				String[] compSplit = goalSplit[i].split(",");
				CheckBox check = new CheckBox(SQLresultView.this);
				TextView textie = new TextView(SQLresultView.this);
				LinearLayout hLay = new LinearLayout(SQLresultView.this); 
				hLay.setOrientation(LinearLayout.HORIZONTAL);
				layGs.addView(hLay);
				hLay.addView(check);
				if (compSplit.length == 2) {
					if (compSplit[1].contentEquals("done")) {
						check.setChecked(true);
					} else {
						check.setChecked(false);
					}
				}
				check.setEnabled(false);
				hLay.addView(textie);
				textie.setText(compSplit[0]);
			}
			if (!dbInfo[2].isEmpty()) {
				if(!dbInfo[2].contentEquals("1")){
					dbInfo[2] = "Your Group Has " + dbInfo[2] + " Members.";
				tvGroup.setText(dbInfo[2]);
				}else{
					tvGroup.setText("");
				}
			}*/
		}
	}

	public class DbProcThr extends AsyncTask<String, Integer, String> {

		//ProgressDialog dialog;

		protected void onPreExecute() {
			// example of setting up something

		}

		@Override
		protected String doInBackground(String... params) {
			
			
			
			/*Thread thread = Thread.currentThread();
			if(spinMem.getStatus() == AsyncTask.Status.PENDING){
				while(spinMem.getStatus() != AsyncTask.Status.FINISHED){
					try {
						synchronized(thread){
						thread.wait();
						}
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}
			if(spinMem.getStatus() == AsyncTask.Status.RUNNING){
				while(spinMem.getStatus() != AsyncTask.Status.FINISHED){
					try {
						synchronized(thread){
						thread.wait();
						}
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}
			if(spinMem.getStatus() == AsyncTask.Status.FINISHED){
				new DbProcThr().execute("");
			}*/
			
			ProjDbUI infoBackG = new ProjDbUI(SQLresultView.this);
			
			
			String neededIn = "";
			String checks = "";
			String dates = "";
			infoBackG.open();
			dates = infoBackG.getCheckDate(checkResult);
			checks = infoBackG.getData(checkResult);
			neededIn = checks + "<->" + dates;
			final String dueDate = infoBackG.getDue(checkResult);
			final String check = checks;
			final String date = dates;
			runOnUiThread(new Runnable(){
				public void run(){
					tvDue.setText(dueDate);
					tvCheckDate.setText(date);
					//date = date.substring(0, date.length());
					//check = check.substring(0, check.length());
					String[] dateArr = date.split("\n");
					String[] checkArr = check.split("\n");
					
					for(int i = 0;i < dateArr.length && i < checkArr.length;i++){
						LinearLayout zontalLay = new LinearLayout(SQLresultView.this);
						TextView dateView = new TextView(SQLresultView.this),checkView = new TextView(SQLresultView.this);
						LinearLayout.LayoutParams layPar = new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
						LinearLayout.LayoutParams dateLayPar = new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
						layPar.weight = 1.0f;
						dateLayPar.weight = 2.0f;
						dateView.setLayoutParams(dateLayPar);
						checkView.setLayoutParams(layPar);
						layCheck.addView(zontalLay);
						zontalLay.addView(dateView);
						zontalLay.addView(checkView);
						dateView.setText(dateArr[i]);
						checkView.setText(checkArr[i]);
					}
				}
			});
			//dates = dates.substring(0, dates.length() - 4);
			//checks = checks.substring(0, checks.length() - 3);
			
			
			String group = "";
			group = infoBackG.getGroup(checkResult);
			
			neededIn += "<->" + group;
			String goals = "";
			goals = infoBackG.getGoals(checkResult);
			infoBackG.close();
			neededIn += "<->" + goals;
			
			
			
			
			
			return neededIn;
		}

		protected void onProgressUpdate(Integer... progress) {

		}

		protected void onPostExecute(String result) {
			
			
			/*Dialog d = new Dialog(SQLresultView.this);
			d.setTitle("Executed");
			TextView tv = new TextView(SQLresultView.this);
			tv.setText("//" + "blah" + "/" + "/ /");
			d.setContentView(tv);
			d.show();*/
			//layCheck = (LinearLayout) findViewById(R.id.layCheckDates);
			/*String[] dbInfo = result.split("<->");
			tvCheckDate.setText(dbInfo[1]);
			LinearLayout layGs = (LinearLayout) findViewById(R.id.layGs);
			String[] dateArr = dbInfo[1].split("\n");
			String[] checkArr = dbInfo[0].split("\n");
			for(int i = 0;i < dateArr.length && i < checkArr.length;i++){
				LinearLayout zontalLay = new LinearLayout(SQLresultView.this);
				TextView dateView = new TextView(SQLresultView.this),checkView = new TextView(SQLresultView.this);
				LinearLayout.LayoutParams layPar = new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
				LinearLayout.LayoutParams dateLayPar = new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
				layPar.weight = 1.0f;
				dateLayPar.weight = 2.0f;
				dateView.setLayoutParams(dateLayPar);
				checkView.setLayoutParams(layPar);
				layCheck.addView(zontalLay);
				zontalLay.addView(dateView);
				zontalLay.addView(checkView);
				dateView.setText(dateArr[i]);
				checkView.setText(checkArr[i]);
			}
			String[] goalSplit = dbInfo[3].split("-");
			for(int i = 0;i < goalSplit.length;i++){
				String[] compSplit = goalSplit[i].split(",");
				CheckBox check = new CheckBox(SQLresultView.this);
				TextView textie = new TextView(SQLresultView.this);
				LinearLayout hLay = new LinearLayout(SQLresultView.this); 
				hLay.setOrientation(LinearLayout.HORIZONTAL);
				layGs.addView(hLay);
				hLay.addView(check);
				if (compSplit.length == 2) {
					if (compSplit[1].contentEquals("done")) {
						check.setChecked(true);
					} else {
						check.setChecked(false);
					}
				}
				check.setEnabled(false);
				hLay.addView(textie);
				textie.setText(compSplit[0]);
			}
			if (!dbInfo[2].isEmpty()) {
				if(!dbInfo[2].contentEquals("1")){
					dbInfo[2] = "Your Group Has " + dbInfo[2] + " Members.";
				tvGroup.setText(dbInfo[2]);
				}else{
					tvGroup.setText("");
				}
			}
			
			Dialog d = new Dialog(SQLresultView.this);
			d.setTitle("Darn.. We Have An Error");
			TextView tv = new TextView(SQLresultView.this);
			tv.setText("//" + checkResult + "/" + dbInfo[1] + "/" + dbInfo[2] + " /");
			d.setContentView(tv);
			d.show();*/
			
		}
	}
